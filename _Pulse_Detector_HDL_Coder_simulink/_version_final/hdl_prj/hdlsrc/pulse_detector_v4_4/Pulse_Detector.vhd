-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\pulse_detector_v4_4\Pulse_Detector.vhd
-- Created: 2022-07-05 22:17:10
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- mid_sample                    ce_out        1
-- detected                      ce_out        1
-- valid_out                     ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Pulse_Detector
-- Source Path: pulse_detector_v4_4/Pulse Detector
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Pulse_Detector IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_in_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_in                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        mid_sample                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
        detected                          :   OUT   std_logic;
        valid_out                         :   OUT   std_logic
        );
END Pulse_Detector;


ARCHITECTURE rtl OF Pulse_Detector IS

  -- Component Declarations
  COMPONENT HDL_Discrete_FIR_Filter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          HDL_Discrete_FIR_Filter_in_re   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          HDL_Discrete_FIR_Filter_in_im   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          HDL_Discrete_FIR_Filter_out_re  :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En37
          HDL_Discrete_FIR_Filter_out_im  :   OUT   std_logic_vector(39 DOWNTO 0)  -- sfix40_En37
          );
  END COMPONENT;

  COMPONENT Compute_Power
    PORT( data_in_re                      :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En37
          data_in_im                      :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En37
          data_out                        :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En11
          );
  END COMPONENT;

  COMPONENT Local_Peak
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          mid_sample                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En11
          detected                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : HDL_Discrete_FIR_Filter
    USE ENTITY work.HDL_Discrete_FIR_Filter(rtl);

  FOR ALL : Compute_Power
    USE ENTITY work.Compute_Power(rtl);

  FOR ALL : Local_Peak
    USE ENTITY work.Local_Peak(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL data_in_re_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_in_im_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_out1_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_out1_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL filter_out_re                    : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL filter_out_im                    : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL mag_sq_out                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL mid_sample_1                     : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL detected_1                       : std_logic;
  SIGNAL mid_sample_signed                : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay2_out1                      : signed(17 DOWNTO 0);  -- sfix18_En11
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL filter_valid                     : std_logic;
  SIGNAL Delay4_out1                      : std_logic;

BEGIN
  u_HDL_Discrete_FIR_Filter : HDL_Discrete_FIR_Filter
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              HDL_Discrete_FIR_Filter_in_re => std_logic_vector(Delay_out1_re),  -- sfix16_En14
              HDL_Discrete_FIR_Filter_in_im => std_logic_vector(Delay_out1_im),  -- sfix16_En14
              HDL_Discrete_FIR_Filter_out_re => filter_out_re,  -- sfix40_En37
              HDL_Discrete_FIR_Filter_out_im => filter_out_im  -- sfix40_En37
              );

  u_Compute_Power : Compute_Power
    PORT MAP( data_in_re => filter_out_re,  -- sfix40_En37
              data_in_im => filter_out_im,  -- sfix40_En37
              data_out => mag_sq_out  -- sfix18_En11
              );

  u_Local_Peak : Local_Peak
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              data_in => mag_sq_out,  -- sfix18_En11
              mid_sample => mid_sample_1,  -- sfix18_En11
              detected => detected_1
              );

  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  enb <= clk_enable;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1_re <= to_signed(16#0000#, 16);
      Delay_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1_re <= data_in_re_signed;
        Delay_out1_im <= data_in_im_signed;
      END IF;
    END IF;
  END PROCESS Delay_process;


  mid_sample_signed <= signed(mid_sample_1);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= mid_sample_signed;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  mid_sample <= std_logic_vector(Delay2_out1);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= detected_1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      filter_valid <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        filter_valid <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= filter_valid;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  ce_out <= clk_enable;

  detected <= Delay3_out1;

  valid_out <= Delay4_out1;

END rtl;

